{"version":3,"sources":["components/NumberContainer.js","utils/range.js","components/NumbersTable.js","components/TableWithInput.js","App.js","serviceWorker.js","index.js"],"names":["NumberContainer","props","containerClassName","useEffect","element","document","getElementById","number","colour","style","backgroundColor","isPrime","id","className","getArrayOfRange","start","end","Array","fill","map","_","idx","ALGORITHMS","ERATOSTHENES","SUNDARAM","randomColour","rand","Math","random","replace","toString","NumbersTable","k","rangeEnd","range","algorithmName","useState","primeRange","setPrimeRange","items","setItems","p","setP","primeNumbersArray","setPrimeNumbersArray","i","setI","l","setL","itemsCopy","value","push","key","useMemo","length","setTimeout","newItems","item","itemProps","updatedPrimeRange","filter","newP","indexOf","j","itemToUpdate","firstPrime","console","log","includes","index","primeNumber","primeNumberCopy","n","TableWithInput","setRangeEnd","shouldStartCalculating","setShouldStartCalculating","type","name","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07304db7.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"../styles/NumberContainer.css\";\n\nfunction NumberContainer(props) {\n  let containerClassName = \"NumberContainer\";\n\n  useEffect(() => {\n    const element = document.getElementById(`numberContainer-${props.number}`);\n\n    if (props.colour && element) {\n      element.style.backgroundColor = props.colour;\n    }\n  });\n\n  if (props.isPrime) {\n    containerClassName = \"NumberContainer NumberContainerIsPrime\";\n  }\n\n  return (\n    <div id={`numberContainer-${props.number}`} className={containerClassName}>\n      <h4 className=\"NumberText\">{props.number}</h4>\n    </div>\n  );\n}\n\nexport default NumberContainer;\n","export const getArrayOfRange = (start, end) =>\n  Array(end - start + 1)\n    .fill()\n    .map((_, idx) => start + idx);\n\n\nexport const ALGORITHMS = {\n  ERATOSTHENES: \"ERATOSTHENES\",\n  SUNDARAM: \"SUNDARAM\"\n}\n\nexport const randomColour = () => {\n  const rand = Math.random()\n  return \"#f00000\".replace(/0/g,function(){return (~~(rand*16)).toString(16);})\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { map } from \"lodash\";\nimport NumberContainer from \"./NumberContainer\";\nimport { getArrayOfRange, ALGORITHMS, randomColour } from \"../utils/range\";\nimport \"../styles/NumbersTable.css\";\n\nfunction NumbersTable(props) {\n  const k = (props.rangeEnd - 2) / 2;\n  const range = getArrayOfRange(\n    props.algorithmName === ALGORITHMS.SUNDARAM ? 1 : 2,\n    props.algorithmName === ALGORITHMS.SUNDARAM ? k : props.rangeEnd\n  );\n\n  const [primeRange, setPrimeRange] = useState(range);\n  const [items, setItems] = useState([]);\n  const [p, setP] = useState(0);\n  const [primeNumbersArray, setPrimeNumbersArray] = useState([]);\n\n  const [i, setI] = useState(1);\n  const [l, setL] = useState(1);\n\n  useEffect(() => {\n    const itemsCopy = [];\n\n    map(range, value => {\n      itemsCopy.push(\n        <NumberContainer\n          key={`Initial-${value}`}\n          number={value}\n          isPrime={false}\n          colour={null}\n        />\n      );\n    });\n\n    setItems(itemsCopy);\n    setP(2);\n  }, []);\n\n  useMemo(() => {\n    if (!items.length) return;\n    if (props.algorithmName === ALGORITHMS.ERATOSTHENES) {\n      if (p < props.rangeEnd) {\n        setTimeout(() => {\n          const colour = randomColour();\n          setPrimeNumbersArray([...primeNumbersArray, p]);\n\n          const newItems = map(items, item => {\n            const { props: itemProps } = item;\n\n            if (itemProps.number === p || itemProps.number % p === 0) {\n              return (\n                <NumberContainer\n                  key={`Coloured-${itemProps.number}`}\n                  number={itemProps.number}\n                  isPrime={itemProps.number === p}\n                  colour={itemProps.colour || colour}\n                />\n              );\n            } else return item;\n          });\n\n          // Only the numbers that are not multiples of p can be prime numbers\n          const updatedPrimeRange = primeRange.filter(\n            i => i === p || i % p !== 0\n          );\n          // New p will be the next so far not multiple of p (prime number)\n          const newP = updatedPrimeRange[updatedPrimeRange.indexOf(p) + 1];\n\n          setItems(newItems);\n          setPrimeRange(updatedPrimeRange);\n          setP(newP);\n        }, 200);\n      }\n    } else if (props.algorithmName === ALGORITHMS.SUNDARAM) {\n      if (i <= k) {\n        setTimeout(() => {\n          const newItems = [...items];\n\n          for (var j = i; i + j + 2 * i * j <= k; j++) {\n            const itemToUpdate = newItems[i + j + 2 * i * j - 1];\n            newItems[i + j + 2 * i * j - 1] = (\n              <NumberContainer\n                key={`Marked-${itemToUpdate.props.number}`}\n                number={itemToUpdate.props.number}\n                isPrime={itemToUpdate.props.isPrime}\n                colour={\"#6bef9a\"}\n              />\n            );\n          }\n\n          setItems(newItems);\n          setI(i + 1);\n        }, 200);\n      } else {\n        setTimeout(() => {\n          const newItems = [...items];\n          if (props.rangeEnd > 2) {\n            const firstPrime = newItems[1];\n\n            newItems[1] = (\n              <NumberContainer\n                key={`Prime-${firstPrime.props.number}`}\n                number={firstPrime.props.number}\n                isPrime={true}\n                colour={firstPrime.props.colour}\n              />\n            );\n            setItems(newItems);\n          }\n          if (l <= k) {\n            if (l === 1) {\n              console.log(newItems)\n              console.log(items)\n            }\n            if (l < newItems.length && !newItems[l].key.includes(\"Marked\")) {\n              console.log(\"l, prime: \" + (l+1));\n              \n              const index = 2 * l + 2;\n              if (index < newItems.length) {\n                const primeNumber = newItems[index];\n                const primeNumberCopy = (\n                  <NumberContainer\n                    key={`Prime-${primeNumber.props.number}`}\n                    number={primeNumber.props.number}\n                    isPrime={true}\n                    colour={primeNumber.props.colour}\n                  />\n                );\n                newItems[index] = primeNumberCopy;\n              }\n            }\n            setItems(newItems);\n            setL(l + 1);\n          }\n        }, 200);\n      }\n    }\n  }, [p, i, l]);\n\n  return (\n    <div>\n      <div className=\"NumbersTable\">{items}</div>\n      <div>\n        {map(primeNumbersArray, n => (\n          <b className=\"NumbersTablePrimeNumber\">{n}</b>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default NumbersTable;\n","import React, { useState, useEffect } from \"react\";\n\nimport NumbersTable from \"./NumbersTable\";\nimport \"../styles/TableWithInput.css\";\n\nfunction TableWithInput(props) {\n  const [rangeEnd, setRangeEnd] = useState(50);\n  const [shouldStartCalculating, setShouldStartCalculating] = useState(false);\n  let element;\n\n  useEffect(() => {\n    element = document.getElementById(`rangeEndInput-${props.algorithmName}`);\n  });\n\n  return (\n    <div className=\"TableWithInput\">\n      <div className=\"InputContainer\">\n        Insert final number of the end:{\" \"}\n        <input\n          id={`rangeEndInput-${props.algorithmName}`}\n          type=\"number\"\n          name=\"maxnumber\"\n          value={rangeEnd}\n          onChange={() => {\n            setShouldStartCalculating(false);\n            element && setRangeEnd(element.value);\n          }}\n        />\n        <button onClick={rangeEnd > 2 ? setShouldStartCalculating : () => {}}>\n          Find prime numbers\n        </button>\n      </div>\n      {shouldStartCalculating ? (\n        <NumbersTable rangeEnd={rangeEnd} algorithmName={props.algorithmName} />\n      ) : null}\n    </div>\n  );\n}\n\nexport default TableWithInput;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TableWithInput from \"./components/TableWithInput.js\";\nimport { ALGORITHMS } from \"./utils/range\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Visualisation of algorithms</p>\n      </header>\n      <h1>Sieve of Eratosthenes</h1>\n      <TableWithInput algorithmName={ALGORITHMS.ERATOSTHENES} />\n      <br></br>\n      <h1>Sieve of Sundaram</h1>\n      <TableWithInput algorithmName={ALGORITHMS.SUNDARAM} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}