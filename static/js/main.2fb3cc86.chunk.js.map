{"version":3,"sources":["components/NumberContainer.js","utils/range.js","components/NumbersTable.js","components/TableWithInput.js","App.js","serviceWorker.js","index.js"],"names":["NumberContainer","props","useEffect","element","document","getElementById","number","colour","style","backgroundColor","id","className","getArrayOfRange","start","end","Array","fill","map","_","idx","ALGORITHMS","ERATOSTHENES","SUNDARAM","randomColour","rand","Math","random","replace","toString","NumbersTable","range","rangeEnd","useState","primeRange","setPrimeRange","items","setItems","p","setP","primeNumbersArray","setPrimeNumbersArray","itemsCopy","value","push","key","isPrime","useMemo","length","algorithmName","setTimeout","newItems","item","itemProps","updatedPrimeRange","filter","i","newP","indexOf","n","TableWithInput","setRangeEnd","shouldStartCalculating","setShouldStartCalculating","type","name","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fb3cc86.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"../styles/NumberContainer.css\";\n\nfunction NumberContainer(props) {\n  let containerClassName = \"NumberContainer\";\n\n  useEffect(() => {\n    const element = document.getElementById(`numberContainer-${props.number}`);\n\n    if (props.colour && element) {\n      element.style.backgroundColor = props.colour;\n    }\n  });\n\n  return (\n    <div\n      id={`numberContainer-${props.number}`}\n      className={containerClassName}\n    >\n      <h4 className=\"NumberText\">{props.number}</h4>\n    </div>\n  );\n}\n\nexport default NumberContainer;\n","export const getArrayOfRange = (start, end) =>\n  Array(end - start + 1)\n    .fill()\n    .map((_, idx) => start + idx);\n\n\nexport const ALGORITHMS = {\n  ERATOSTHENES: \"ERATOSTHENES\",\n  SUNDARAM: \"SUNDARAM\"\n}\n\nexport const randomColour = () => {\n  const rand = Math.random()\n  return \"#000000\".replace(/0/g,function(){return (~~(rand*16)).toString(16);})\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { map } from \"lodash\";\nimport NumberContainer from \"./NumberContainer\";\nimport { getArrayOfRange, ALGORITHMS, randomColour } from \"../utils/range\";\nimport \"../styles/NumbersTable.css\";\n\nfunction NumbersTable(props) {\n  const range = getArrayOfRange(2, props.rangeEnd);\n  const [primeRange, setPrimeRange] = useState(range);\n  const [items, setItems] = useState([]);\n  const [p, setP] = useState(0);\n  const [primeNumbersArray, setPrimeNumbersArray] = useState([]);\n\n  useEffect(() => {\n    const itemsCopy = [];\n\n    map(range, value => {\n      itemsCopy.push(\n        <NumberContainer\n          key={`Initial-${value}`}\n          number={value}\n          isPrime={false}\n          colour={null}\n        />\n      );\n    });\n\n    setItems(itemsCopy);\n    setP(2);\n  }, []);\n\n  useMemo(() => {\n    if (!items.length) return;\n    if (props.algorithmName === ALGORITHMS.ERATOSTHENES) {\n      if (p < props.rangeEnd) {\n        setTimeout(() => {\n          const colour = randomColour();\n          setPrimeNumbersArray([...primeNumbersArray, p]);\n\n          const newItems = map(items, item => {\n            const { props: itemProps } = item;\n\n            if (itemProps.number === p || itemProps.number % p === 0) {\n              return (\n                <NumberContainer\n                  key={`Coloured-${itemProps.number}`}\n                  number={itemProps.number}\n                  isPrime={itemProps.number === p}\n                  colour={itemProps.colour || colour}\n                />\n              );\n            } else return item;\n          });\n\n          // Only the numbers that are not multiples of p can be prime numbers\n          const updatedPrimeRange = primeRange.filter(\n            i => i === p || i % p !== 0\n          );\n          // New p will be the next so far not multiple of p (prime number)\n          const newP = updatedPrimeRange[updatedPrimeRange.indexOf(p) + 1];\n\n          setItems(newItems);\n          setPrimeRange(updatedPrimeRange);\n          setP(newP);\n        }, 700);\n      }\n    }\n  }, [p]);\n\n  return (\n    <div>\n      <div className=\"NumbersTable\">{items}</div>\n      <div>\n        {map(primeNumbersArray, n => (\n          <b className=\"NumbersTablePrimeNumber\" >{n}</b>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default NumbersTable;\n","import React, { useState } from 'react';\n\nimport NumbersTable from './NumbersTable'\nimport { ALGORITHMS } from '../utils/range';\nimport '../styles/TableWithInput.css'\n\nfunction TableWithInput() {\n\n    const [rangeEnd, setRangeEnd] = useState(50);\n    const [shouldStartCalculating, setShouldStartCalculating] = useState(false);\n\n    return (\n        <div className=\"TableWithInput\">\n            <div className=\"InputContainer\">\n                Insert final number of the end: <input id=\"rangeEndInput\" type=\"number\" name=\"maxnumber\" value={rangeEnd} onChange={() => {\n                    setShouldStartCalculating(false)\n                    setRangeEnd(document.getElementById(\"rangeEndInput\").value)\n                }}/>\n                <button onClick={rangeEnd > 2 ? setShouldStartCalculating : () => {}}>Find prime numbers</button>\n            </div>\n            {shouldStartCalculating ? \n                <NumbersTable rangeEnd={rangeEnd} algorithmName={ALGORITHMS.ERATOSTHENES} />\n            : null}\n        </div>\n    )\n}\n\nexport default TableWithInput;","import React from 'react';\nimport './App.css';\nimport TableWithInput from './components/TableWithInput.js'\nimport { ALGORITHMS } from './utils/range';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Visualisation of algorithms\n        </p>\n      </header>\n      <TableWithInput algorithmName={ALGORITHMS.ERATOSTHENES} />\n      {/* <TableWithInput algorithmName={ALGORITHMS.EULER} />\n      <TableWithInput algorithmName={ALGORITHMS.ATKINS} /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}